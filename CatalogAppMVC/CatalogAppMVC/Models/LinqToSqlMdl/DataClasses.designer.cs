#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     Этот код создан программой.
//     Исполняемая версия:4.0.30319.34014
//
//     Изменения в этом файле могут привести к неправильной работе и будут потеряны в случае
//     повторной генерации кода.
// </auto-generated>
//------------------------------------------------------------------------------

namespace CatalogAppMVC.Models.LinqToSqlMdl
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="CatalogDatabase")]
	public partial class DataClassesDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Определения метода расширяемости
    partial void OnCreated();
    partial void InsertUsers(Users instance);
    partial void UpdateUsers(Users instance);
    partial void DeleteUsers(Users instance);
    partial void InsertAccessCatalogCategories(AccessCatalogCategories instance);
    partial void UpdateAccessCatalogCategories(AccessCatalogCategories instance);
    partial void DeleteAccessCatalogCategories(AccessCatalogCategories instance);
    partial void InsertAspNetUserClaims(AspNetUserClaims instance);
    partial void UpdateAspNetUserClaims(AspNetUserClaims instance);
    partial void DeleteAspNetUserClaims(AspNetUserClaims instance);
    partial void InsertAspNetUserLogins(AspNetUserLogins instance);
    partial void UpdateAspNetUserLogins(AspNetUserLogins instance);
    partial void DeleteAspNetUserLogins(AspNetUserLogins instance);
    partial void InsertCatalogCategories(CatalogCategories instance);
    partial void UpdateCatalogCategories(CatalogCategories instance);
    partial void DeleteCatalogCategories(CatalogCategories instance);
    partial void InsertDocuments(Documents instance);
    partial void UpdateDocuments(Documents instance);
    partial void DeleteDocuments(Documents instance);
    partial void InsertMachinery(Machinery instance);
    partial void UpdateMachinery(Machinery instance);
    partial void DeleteMachinery(Machinery instance);
    partial void InsertMachineSpecifications(MachineSpecifications instance);
    partial void UpdateMachineSpecifications(MachineSpecifications instance);
    partial void DeleteMachineSpecifications(MachineSpecifications instance);
    partial void InsertMachineTags(MachineTags instance);
    partial void UpdateMachineTags(MachineTags instance);
    partial void DeleteMachineTags(MachineTags instance);
    partial void InsertMandatSpecificCatalogCategories(MandatSpecificCatalogCategories instance);
    partial void UpdateMandatSpecificCatalogCategories(MandatSpecificCatalogCategories instance);
    partial void DeleteMandatSpecificCatalogCategories(MandatSpecificCatalogCategories instance);
    partial void InsertRoles(Roles instance);
    partial void UpdateRoles(Roles instance);
    partial void DeleteRoles(Roles instance);
    partial void InsertSpecifications(Specifications instance);
    partial void UpdateSpecifications(Specifications instance);
    partial void DeleteSpecifications(Specifications instance);
    partial void InsertTags(Tags instance);
    partial void UpdateTags(Tags instance);
    partial void DeleteTags(Tags instance);
    #endregion
		
		public DataClassesDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["CatalogDatabaseConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DataClassesDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Users> Users
		{
			get
			{
				return this.GetTable<Users>();
			}
		}
		
		public System.Data.Linq.Table<AccessCatalogCategories> AccessCatalogCategories
		{
			get
			{
				return this.GetTable<AccessCatalogCategories>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserClaims> AspNetUserClaims
		{
			get
			{
				return this.GetTable<AspNetUserClaims>();
			}
		}
		
		public System.Data.Linq.Table<AspNetUserLogins> AspNetUserLogins
		{
			get
			{
				return this.GetTable<AspNetUserLogins>();
			}
		}
		
		public System.Data.Linq.Table<CatalogCategories> CatalogCategories
		{
			get
			{
				return this.GetTable<CatalogCategories>();
			}
		}
		
		public System.Data.Linq.Table<Documents> Documents
		{
			get
			{
				return this.GetTable<Documents>();
			}
		}
		
		public System.Data.Linq.Table<Machinery> Machinery
		{
			get
			{
				return this.GetTable<Machinery>();
			}
		}
		
		public System.Data.Linq.Table<MachineSpecifications> MachineSpecifications
		{
			get
			{
				return this.GetTable<MachineSpecifications>();
			}
		}
		
		public System.Data.Linq.Table<MachineTags> MachineTags
		{
			get
			{
				return this.GetTable<MachineTags>();
			}
		}
		
		public System.Data.Linq.Table<MandatSpecificCatalogCategories> MandatSpecificCatalogCategories
		{
			get
			{
				return this.GetTable<MandatSpecificCatalogCategories>();
			}
		}
		
		public System.Data.Linq.Table<Roles> Roles
		{
			get
			{
				return this.GetTable<Roles>();
			}
		}
		
		public System.Data.Linq.Table<Specifications> Specifications
		{
			get
			{
				return this.GetTable<Specifications>();
			}
		}
		
		public System.Data.Linq.Table<Tags> Tags
		{
			get
			{
				return this.GetTable<Tags>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Users")]
	public partial class Users : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _FirstName;
		
		private string _LastName;
		
		private string _Email;
		
		private bool _EmailConfirmed;
		
		private string _PasswordHash;
		
		private string _SecurityStamp;
		
		private System.Nullable<System.DateTime> _LockoutEndDateUtc;
		
		private bool _LockoutEnabled;
		
		private int _AccessFailedCount;
		
		private string _PathToPhoto;
		
		private int _RoleID;
		
		private int _Rating;
		
		private EntitySet<AspNetUserClaims> _AspNetUserClaims;
		
		private EntitySet<AspNetUserLogins> _AspNetUserLogins;
		
		private EntitySet<Documents> _Documents;
		
		private EntitySet<Machinery> _Machinery;
		
		private EntityRef<Roles> _Roles;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFirstNameChanging(string value);
    partial void OnFirstNameChanged();
    partial void OnLastNameChanging(string value);
    partial void OnLastNameChanged();
    partial void OnEmailChanging(string value);
    partial void OnEmailChanged();
    partial void OnEmailConfirmedChanging(bool value);
    partial void OnEmailConfirmedChanged();
    partial void OnPasswordHashChanging(string value);
    partial void OnPasswordHashChanged();
    partial void OnSecurityStampChanging(string value);
    partial void OnSecurityStampChanged();
    partial void OnLockoutEndDateUtcChanging(System.Nullable<System.DateTime> value);
    partial void OnLockoutEndDateUtcChanged();
    partial void OnLockoutEnabledChanging(bool value);
    partial void OnLockoutEnabledChanged();
    partial void OnAccessFailedCountChanging(int value);
    partial void OnAccessFailedCountChanged();
    partial void OnPathToPhotoChanging(string value);
    partial void OnPathToPhotoChanged();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnRatingChanging(int value);
    partial void OnRatingChanged();
    #endregion
		
		public Users()
		{
			this._AspNetUserClaims = new EntitySet<AspNetUserClaims>(new Action<AspNetUserClaims>(this.attach_AspNetUserClaims), new Action<AspNetUserClaims>(this.detach_AspNetUserClaims));
			this._AspNetUserLogins = new EntitySet<AspNetUserLogins>(new Action<AspNetUserLogins>(this.attach_AspNetUserLogins), new Action<AspNetUserLogins>(this.detach_AspNetUserLogins));
			this._Documents = new EntitySet<Documents>(new Action<Documents>(this.attach_Documents), new Action<Documents>(this.detach_Documents));
			this._Machinery = new EntitySet<Machinery>(new Action<Machinery>(this.attach_Machinery), new Action<Machinery>(this.detach_Machinery));
			this._Roles = default(EntityRef<Roles>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FirstName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string FirstName
		{
			get
			{
				return this._FirstName;
			}
			set
			{
				if ((this._FirstName != value))
				{
					this.OnFirstNameChanging(value);
					this.SendPropertyChanging();
					this._FirstName = value;
					this.SendPropertyChanged("FirstName");
					this.OnFirstNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LastName", DbType="NVarChar(50) NOT NULL", CanBeNull=false)]
		public string LastName
		{
			get
			{
				return this._LastName;
			}
			set
			{
				if ((this._LastName != value))
				{
					this.OnLastNameChanging(value);
					this.SendPropertyChanging();
					this._LastName = value;
					this.SendPropertyChanged("LastName");
					this.OnLastNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Email", DbType="NVarChar(256) NOT NULL", CanBeNull=false)]
		public string Email
		{
			get
			{
				return this._Email;
			}
			set
			{
				if ((this._Email != value))
				{
					this.OnEmailChanging(value);
					this.SendPropertyChanging();
					this._Email = value;
					this.SendPropertyChanged("Email");
					this.OnEmailChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_EmailConfirmed", DbType="Bit NOT NULL")]
		public bool EmailConfirmed
		{
			get
			{
				return this._EmailConfirmed;
			}
			set
			{
				if ((this._EmailConfirmed != value))
				{
					this.OnEmailConfirmedChanging(value);
					this.SendPropertyChanging();
					this._EmailConfirmed = value;
					this.SendPropertyChanged("EmailConfirmed");
					this.OnEmailConfirmedChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PasswordHash", DbType="NVarChar(MAX)")]
		public string PasswordHash
		{
			get
			{
				return this._PasswordHash;
			}
			set
			{
				if ((this._PasswordHash != value))
				{
					this.OnPasswordHashChanging(value);
					this.SendPropertyChanging();
					this._PasswordHash = value;
					this.SendPropertyChanged("PasswordHash");
					this.OnPasswordHashChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SecurityStamp", DbType="NVarChar(MAX)")]
		public string SecurityStamp
		{
			get
			{
				return this._SecurityStamp;
			}
			set
			{
				if ((this._SecurityStamp != value))
				{
					this.OnSecurityStampChanging(value);
					this.SendPropertyChanging();
					this._SecurityStamp = value;
					this.SendPropertyChanged("SecurityStamp");
					this.OnSecurityStampChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEndDateUtc", DbType="DateTime")]
		public System.Nullable<System.DateTime> LockoutEndDateUtc
		{
			get
			{
				return this._LockoutEndDateUtc;
			}
			set
			{
				if ((this._LockoutEndDateUtc != value))
				{
					this.OnLockoutEndDateUtcChanging(value);
					this.SendPropertyChanging();
					this._LockoutEndDateUtc = value;
					this.SendPropertyChanged("LockoutEndDateUtc");
					this.OnLockoutEndDateUtcChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LockoutEnabled", DbType="Bit NOT NULL")]
		public bool LockoutEnabled
		{
			get
			{
				return this._LockoutEnabled;
			}
			set
			{
				if ((this._LockoutEnabled != value))
				{
					this.OnLockoutEnabledChanging(value);
					this.SendPropertyChanging();
					this._LockoutEnabled = value;
					this.SendPropertyChanged("LockoutEnabled");
					this.OnLockoutEnabledChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AccessFailedCount", DbType="Int NOT NULL")]
		public int AccessFailedCount
		{
			get
			{
				return this._AccessFailedCount;
			}
			set
			{
				if ((this._AccessFailedCount != value))
				{
					this.OnAccessFailedCountChanging(value);
					this.SendPropertyChanging();
					this._AccessFailedCount = value;
					this.SendPropertyChanged("AccessFailedCount");
					this.OnAccessFailedCountChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathToPhoto", DbType="NVarChar(MAX)")]
		public string PathToPhoto
		{
			get
			{
				return this._PathToPhoto;
			}
			set
			{
				if ((this._PathToPhoto != value))
				{
					this.OnPathToPhotoChanging(value);
					this.SendPropertyChanging();
					this._PathToPhoto = value;
					this.SendPropertyChanged("PathToPhoto");
					this.OnPathToPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", DbType="Int NOT NULL")]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Roles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rating", DbType="Int NOT NULL")]
		public int Rating
		{
			get
			{
				return this._Rating;
			}
			set
			{
				if ((this._Rating != value))
				{
					this.OnRatingChanging(value);
					this.SendPropertyChanging();
					this._Rating = value;
					this.SendPropertyChanged("Rating");
					this.OnRatingChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_AspNetUserClaims", Storage="_AspNetUserClaims", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserClaims> AspNetUserClaims
		{
			get
			{
				return this._AspNetUserClaims;
			}
			set
			{
				this._AspNetUserClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_AspNetUserLogins", Storage="_AspNetUserLogins", ThisKey="Id", OtherKey="UserId")]
		public EntitySet<AspNetUserLogins> AspNetUserLogins
		{
			get
			{
				return this._AspNetUserLogins;
			}
			set
			{
				this._AspNetUserLogins.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Documents", Storage="_Documents", ThisKey="Id", OtherKey="UserAuthor")]
		public EntitySet<Documents> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Machinery", Storage="_Machinery", ThisKey="Id", OtherKey="UserAuthor")]
		public EntitySet<Machinery> Machinery
		{
			get
			{
				return this._Machinery;
			}
			set
			{
				this._Machinery.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roles_Users", Storage="_Roles", ThisKey="RoleID", OtherKey="Id", IsForeignKey=true)]
		public Roles Roles
		{
			get
			{
				return this._Roles.Entity;
			}
			set
			{
				Roles previousValue = this._Roles.Entity;
				if (((previousValue != value) 
							|| (this._Roles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roles.Entity = null;
						previousValue.Users.Remove(this);
					}
					this._Roles.Entity = value;
					if ((value != null))
					{
						value.Users.Add(this);
						this._RoleID = value.Id;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Roles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AspNetUserClaims(AspNetUserClaims entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_AspNetUserClaims(AspNetUserClaims entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_AspNetUserLogins(AspNetUserLogins entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_AspNetUserLogins(AspNetUserLogins entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Documents(Documents entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Documents(Documents entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
		
		private void attach_Machinery(Machinery entity)
		{
			this.SendPropertyChanging();
			entity.Users = this;
		}
		
		private void detach_Machinery(Machinery entity)
		{
			this.SendPropertyChanging();
			entity.Users = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AccessCatalogCategories")]
	public partial class AccessCatalogCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleID;
		
		private int _CategoryID;
		
		private bool _R;
		
		private bool _W;
		
		private bool _F;
		
		private EntityRef<CatalogCategories> _CatalogCategories;
		
		private EntityRef<Roles> _Roles;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleIDChanging(int value);
    partial void OnRoleIDChanged();
    partial void OnCategoryIDChanging(int value);
    partial void OnCategoryIDChanged();
    partial void OnRChanging(bool value);
    partial void OnRChanged();
    partial void OnWChanging(bool value);
    partial void OnWChanged();
    partial void OnFChanging(bool value);
    partial void OnFChanged();
    #endregion
		
		public AccessCatalogCategories()
		{
			this._CatalogCategories = default(EntityRef<CatalogCategories>);
			this._Roles = default(EntityRef<Roles>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleID", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int RoleID
		{
			get
			{
				return this._RoleID;
			}
			set
			{
				if ((this._RoleID != value))
				{
					if (this._Roles.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleIDChanging(value);
					this.SendPropertyChanging();
					this._RoleID = value;
					this.SendPropertyChanged("RoleID");
					this.OnRoleIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CategoryID
		{
			get
			{
				return this._CategoryID;
			}
			set
			{
				if ((this._CategoryID != value))
				{
					if (this._CatalogCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CategoryID = value;
					this.SendPropertyChanged("CategoryID");
					this.OnCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_R", DbType="Bit NOT NULL")]
		public bool R
		{
			get
			{
				return this._R;
			}
			set
			{
				if ((this._R != value))
				{
					this.OnRChanging(value);
					this.SendPropertyChanging();
					this._R = value;
					this.SendPropertyChanged("R");
					this.OnRChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_W", DbType="Bit NOT NULL")]
		public bool W
		{
			get
			{
				return this._W;
			}
			set
			{
				if ((this._W != value))
				{
					this.OnWChanging(value);
					this.SendPropertyChanging();
					this._W = value;
					this.SendPropertyChanged("W");
					this.OnWChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_F", DbType="Bit NOT NULL")]
		public bool F
		{
			get
			{
				return this._F;
			}
			set
			{
				if ((this._F != value))
				{
					this.OnFChanging(value);
					this.SendPropertyChanging();
					this._F = value;
					this.SendPropertyChanged("F");
					this.OnFChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogCategories_AccessCatalogCategories", Storage="_CatalogCategories", ThisKey="CategoryID", OtherKey="Id", IsForeignKey=true)]
		public CatalogCategories CatalogCategories
		{
			get
			{
				return this._CatalogCategories.Entity;
			}
			set
			{
				CatalogCategories previousValue = this._CatalogCategories.Entity;
				if (((previousValue != value) 
							|| (this._CatalogCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatalogCategories.Entity = null;
						previousValue.AccessCatalogCategories.Remove(this);
					}
					this._CatalogCategories.Entity = value;
					if ((value != null))
					{
						value.AccessCatalogCategories.Add(this);
						this._CategoryID = value.Id;
					}
					else
					{
						this._CategoryID = default(int);
					}
					this.SendPropertyChanged("CatalogCategories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roles_AccessCatalogCategories", Storage="_Roles", ThisKey="RoleID", OtherKey="Id", IsForeignKey=true)]
		public Roles Roles
		{
			get
			{
				return this._Roles.Entity;
			}
			set
			{
				Roles previousValue = this._Roles.Entity;
				if (((previousValue != value) 
							|| (this._Roles.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Roles.Entity = null;
						previousValue.AccessCatalogCategories.Remove(this);
					}
					this._Roles.Entity = value;
					if ((value != null))
					{
						value.AccessCatalogCategories.Add(this);
						this._RoleID = value.Id;
					}
					else
					{
						this._RoleID = default(int);
					}
					this.SendPropertyChanged("Roles");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserClaims")]
	public partial class AspNetUserClaims : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _id;
		
		private int _UserId;
		
		private string _ClaimType;
		
		private string _ClaimValue;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnidChanging(int value);
    partial void OnidChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    partial void OnClaimTypeChanging(string value);
    partial void OnClaimTypeChanged();
    partial void OnClaimValueChanging(string value);
    partial void OnClaimValueChanged();
    #endregion
		
		public AspNetUserClaims()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_id", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int id
		{
			get
			{
				return this._id;
			}
			set
			{
				if ((this._id != value))
				{
					this.OnidChanging(value);
					this.SendPropertyChanging();
					this._id = value;
					this.SendPropertyChanged("id");
					this.OnidChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL")]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimType", DbType="NVarChar(MAX)")]
		public string ClaimType
		{
			get
			{
				return this._ClaimType;
			}
			set
			{
				if ((this._ClaimType != value))
				{
					this.OnClaimTypeChanging(value);
					this.SendPropertyChanging();
					this._ClaimType = value;
					this.SendPropertyChanged("ClaimType");
					this.OnClaimTypeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimValue", DbType="NVarChar(MAX)")]
		public string ClaimValue
		{
			get
			{
				return this._ClaimValue;
			}
			set
			{
				if ((this._ClaimValue != value))
				{
					this.OnClaimValueChanging(value);
					this.SendPropertyChanging();
					this._ClaimValue = value;
					this.SendPropertyChanged("ClaimValue");
					this.OnClaimValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_AspNetUserClaims", Storage="_Users", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.AspNetUserClaims.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.AspNetUserClaims.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.AspNetUserLogins")]
	public partial class AspNetUserLogins : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private string _LoginProvider;
		
		private string _ProviderKey;
		
		private int _UserId;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLoginProviderChanging(string value);
    partial void OnLoginProviderChanged();
    partial void OnProviderKeyChanging(string value);
    partial void OnProviderKeyChanged();
    partial void OnUserIdChanging(int value);
    partial void OnUserIdChanged();
    #endregion
		
		public AspNetUserLogins()
		{
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LoginProvider", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string LoginProvider
		{
			get
			{
				return this._LoginProvider;
			}
			set
			{
				if ((this._LoginProvider != value))
				{
					this.OnLoginProviderChanging(value);
					this.SendPropertyChanging();
					this._LoginProvider = value;
					this.SendPropertyChanged("LoginProvider");
					this.OnLoginProviderChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProviderKey", DbType="NVarChar(128) NOT NULL", CanBeNull=false, IsPrimaryKey=true)]
		public string ProviderKey
		{
			get
			{
				return this._ProviderKey;
			}
			set
			{
				if ((this._ProviderKey != value))
				{
					this.OnProviderKeyChanging(value);
					this.SendPropertyChanging();
					this._ProviderKey = value;
					this.SendPropertyChanged("ProviderKey");
					this.OnProviderKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int UserId
		{
			get
			{
				return this._UserId;
			}
			set
			{
				if ((this._UserId != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserIdChanging(value);
					this.SendPropertyChanging();
					this._UserId = value;
					this.SendPropertyChanged("UserId");
					this.OnUserIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_AspNetUserLogins", Storage="_Users", ThisKey="UserId", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.AspNetUserLogins.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.AspNetUserLogins.Add(this);
						this._UserId = value.Id;
					}
					else
					{
						this._UserId = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.CatalogCategories")]
	public partial class CatalogCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<AccessCatalogCategories> _AccessCatalogCategories;
		
		private EntitySet<Machinery> _Machinery;
		
		private EntitySet<MandatSpecificCatalogCategories> _MandatSpecificCatalogCategories;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public CatalogCategories()
		{
			this._AccessCatalogCategories = new EntitySet<AccessCatalogCategories>(new Action<AccessCatalogCategories>(this.attach_AccessCatalogCategories), new Action<AccessCatalogCategories>(this.detach_AccessCatalogCategories));
			this._Machinery = new EntitySet<Machinery>(new Action<Machinery>(this.attach_Machinery), new Action<Machinery>(this.detach_Machinery));
			this._MandatSpecificCatalogCategories = new EntitySet<MandatSpecificCatalogCategories>(new Action<MandatSpecificCatalogCategories>(this.attach_MandatSpecificCatalogCategories), new Action<MandatSpecificCatalogCategories>(this.detach_MandatSpecificCatalogCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogCategories_AccessCatalogCategories", Storage="_AccessCatalogCategories", ThisKey="Id", OtherKey="CategoryID")]
		public EntitySet<AccessCatalogCategories> AccessCatalogCategories
		{
			get
			{
				return this._AccessCatalogCategories;
			}
			set
			{
				this._AccessCatalogCategories.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogCategories_Machinery", Storage="_Machinery", ThisKey="Id", OtherKey="Category")]
		public EntitySet<Machinery> Machinery
		{
			get
			{
				return this._Machinery;
			}
			set
			{
				this._Machinery.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogCategories_MandatSpecificCatalogCategories", Storage="_MandatSpecificCatalogCategories", ThisKey="Id", OtherKey="CatalogCategoryID")]
		public EntitySet<MandatSpecificCatalogCategories> MandatSpecificCatalogCategories
		{
			get
			{
				return this._MandatSpecificCatalogCategories;
			}
			set
			{
				this._MandatSpecificCatalogCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_AccessCatalogCategories(AccessCatalogCategories entity)
		{
			this.SendPropertyChanging();
			entity.CatalogCategories = this;
		}
		
		private void detach_AccessCatalogCategories(AccessCatalogCategories entity)
		{
			this.SendPropertyChanging();
			entity.CatalogCategories = null;
		}
		
		private void attach_Machinery(Machinery entity)
		{
			this.SendPropertyChanging();
			entity.CatalogCategories = this;
		}
		
		private void detach_Machinery(Machinery entity)
		{
			this.SendPropertyChanging();
			entity.CatalogCategories = null;
		}
		
		private void attach_MandatSpecificCatalogCategories(MandatSpecificCatalogCategories entity)
		{
			this.SendPropertyChanging();
			entity.CatalogCategories = this;
		}
		
		private void detach_MandatSpecificCatalogCategories(MandatSpecificCatalogCategories entity)
		{
			this.SendPropertyChanging();
			entity.CatalogCategories = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Documents")]
	public partial class Documents : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserAuthor;
		
		private string _PathToFile;
		
		private int _Status;
		
		private int _MachineID;
		
		private EntityRef<Users> _Users;
		
		private EntityRef<Machinery> _Machinery;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserAuthorChanging(int value);
    partial void OnUserAuthorChanged();
    partial void OnPathToFileChanging(string value);
    partial void OnPathToFileChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnMachineIDChanging(int value);
    partial void OnMachineIDChanged();
    #endregion
		
		public Documents()
		{
			this._Users = default(EntityRef<Users>);
			this._Machinery = default(EntityRef<Machinery>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAuthor", DbType="Int NOT NULL")]
		public int UserAuthor
		{
			get
			{
				return this._UserAuthor;
			}
			set
			{
				if ((this._UserAuthor != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAuthorChanging(value);
					this.SendPropertyChanging();
					this._UserAuthor = value;
					this.SendPropertyChanged("UserAuthor");
					this.OnUserAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathToFile", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string PathToFile
		{
			get
			{
				return this._PathToFile;
			}
			set
			{
				if ((this._PathToFile != value))
				{
					this.OnPathToFileChanging(value);
					this.SendPropertyChanging();
					this._PathToFile = value;
					this.SendPropertyChanged("PathToFile");
					this.OnPathToFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineID", DbType="Int NOT NULL")]
		public int MachineID
		{
			get
			{
				return this._MachineID;
			}
			set
			{
				if ((this._MachineID != value))
				{
					if (this._Machinery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMachineIDChanging(value);
					this.SendPropertyChanging();
					this._MachineID = value;
					this.SendPropertyChanged("MachineID");
					this.OnMachineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Documents", Storage="_Users", ThisKey="UserAuthor", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._UserAuthor = value.Id;
					}
					else
					{
						this._UserAuthor = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Machinery_Documents", Storage="_Machinery", ThisKey="MachineID", OtherKey="Id", IsForeignKey=true)]
		public Machinery Machinery
		{
			get
			{
				return this._Machinery.Entity;
			}
			set
			{
				Machinery previousValue = this._Machinery.Entity;
				if (((previousValue != value) 
							|| (this._Machinery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Machinery.Entity = null;
						previousValue.Documents.Remove(this);
					}
					this._Machinery.Entity = value;
					if ((value != null))
					{
						value.Documents.Add(this);
						this._MachineID = value.Id;
					}
					else
					{
						this._MachineID = default(int);
					}
					this.SendPropertyChanged("Machinery");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Machinery")]
	public partial class Machinery : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UserAuthor;
		
		private string _Description;
		
		private string _PathToPhoto;
		
		private int _Status;
		
		private int _Category;
		
		private string _title;
		
		private EntitySet<Documents> _Documents;
		
		private EntitySet<MachineSpecifications> _MachineSpecifications;
		
		private EntitySet<MachineTags> _MachineTags;
		
		private EntityRef<CatalogCategories> _CatalogCategories;
		
		private EntityRef<Users> _Users;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUserAuthorChanging(int value);
    partial void OnUserAuthorChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPathToPhotoChanging(string value);
    partial void OnPathToPhotoChanged();
    partial void OnStatusChanging(int value);
    partial void OnStatusChanged();
    partial void OnCategoryChanging(int value);
    partial void OnCategoryChanged();
    partial void OntitleChanging(string value);
    partial void OntitleChanged();
    #endregion
		
		public Machinery()
		{
			this._Documents = new EntitySet<Documents>(new Action<Documents>(this.attach_Documents), new Action<Documents>(this.detach_Documents));
			this._MachineSpecifications = new EntitySet<MachineSpecifications>(new Action<MachineSpecifications>(this.attach_MachineSpecifications), new Action<MachineSpecifications>(this.detach_MachineSpecifications));
			this._MachineTags = new EntitySet<MachineTags>(new Action<MachineTags>(this.attach_MachineTags), new Action<MachineTags>(this.detach_MachineTags));
			this._CatalogCategories = default(EntityRef<CatalogCategories>);
			this._Users = default(EntityRef<Users>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UserAuthor", DbType="Int NOT NULL")]
		public int UserAuthor
		{
			get
			{
				return this._UserAuthor;
			}
			set
			{
				if ((this._UserAuthor != value))
				{
					if (this._Users.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUserAuthorChanging(value);
					this.SendPropertyChanging();
					this._UserAuthor = value;
					this.SendPropertyChanged("UserAuthor");
					this.OnUserAuthorChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PathToPhoto", DbType="NVarChar(MAX)")]
		public string PathToPhoto
		{
			get
			{
				return this._PathToPhoto;
			}
			set
			{
				if ((this._PathToPhoto != value))
				{
					this.OnPathToPhotoChanging(value);
					this.SendPropertyChanging();
					this._PathToPhoto = value;
					this.SendPropertyChanged("PathToPhoto");
					this.OnPathToPhotoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Status", DbType="Int NOT NULL")]
		public int Status
		{
			get
			{
				return this._Status;
			}
			set
			{
				if ((this._Status != value))
				{
					this.OnStatusChanging(value);
					this.SendPropertyChanging();
					this._Status = value;
					this.SendPropertyChanged("Status");
					this.OnStatusChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Category", DbType="Int NOT NULL")]
		public int Category
		{
			get
			{
				return this._Category;
			}
			set
			{
				if ((this._Category != value))
				{
					if (this._CatalogCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCategoryChanging(value);
					this.SendPropertyChanging();
					this._Category = value;
					this.SendPropertyChanged("Category");
					this.OnCategoryChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_title", DbType="NVarChar(100) NOT NULL", CanBeNull=false)]
		public string title
		{
			get
			{
				return this._title;
			}
			set
			{
				if ((this._title != value))
				{
					this.OntitleChanging(value);
					this.SendPropertyChanging();
					this._title = value;
					this.SendPropertyChanged("title");
					this.OntitleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Machinery_Documents", Storage="_Documents", ThisKey="Id", OtherKey="MachineID")]
		public EntitySet<Documents> Documents
		{
			get
			{
				return this._Documents;
			}
			set
			{
				this._Documents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Machinery_MachineSpecifications", Storage="_MachineSpecifications", ThisKey="Id", OtherKey="MachineID")]
		public EntitySet<MachineSpecifications> MachineSpecifications
		{
			get
			{
				return this._MachineSpecifications;
			}
			set
			{
				this._MachineSpecifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Machinery_MachineTags", Storage="_MachineTags", ThisKey="Id", OtherKey="MachineID")]
		public EntitySet<MachineTags> MachineTags
		{
			get
			{
				return this._MachineTags;
			}
			set
			{
				this._MachineTags.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogCategories_Machinery", Storage="_CatalogCategories", ThisKey="Category", OtherKey="Id", IsForeignKey=true)]
		public CatalogCategories CatalogCategories
		{
			get
			{
				return this._CatalogCategories.Entity;
			}
			set
			{
				CatalogCategories previousValue = this._CatalogCategories.Entity;
				if (((previousValue != value) 
							|| (this._CatalogCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatalogCategories.Entity = null;
						previousValue.Machinery.Remove(this);
					}
					this._CatalogCategories.Entity = value;
					if ((value != null))
					{
						value.Machinery.Add(this);
						this._Category = value.Id;
					}
					else
					{
						this._Category = default(int);
					}
					this.SendPropertyChanged("CatalogCategories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Users_Machinery", Storage="_Users", ThisKey="UserAuthor", OtherKey="Id", IsForeignKey=true)]
		public Users Users
		{
			get
			{
				return this._Users.Entity;
			}
			set
			{
				Users previousValue = this._Users.Entity;
				if (((previousValue != value) 
							|| (this._Users.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Users.Entity = null;
						previousValue.Machinery.Remove(this);
					}
					this._Users.Entity = value;
					if ((value != null))
					{
						value.Machinery.Add(this);
						this._UserAuthor = value.Id;
					}
					else
					{
						this._UserAuthor = default(int);
					}
					this.SendPropertyChanged("Users");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Documents(Documents entity)
		{
			this.SendPropertyChanging();
			entity.Machinery = this;
		}
		
		private void detach_Documents(Documents entity)
		{
			this.SendPropertyChanging();
			entity.Machinery = null;
		}
		
		private void attach_MachineSpecifications(MachineSpecifications entity)
		{
			this.SendPropertyChanging();
			entity.Machinery = this;
		}
		
		private void detach_MachineSpecifications(MachineSpecifications entity)
		{
			this.SendPropertyChanging();
			entity.Machinery = null;
		}
		
		private void attach_MachineTags(MachineTags entity)
		{
			this.SendPropertyChanging();
			entity.Machinery = this;
		}
		
		private void detach_MachineTags(MachineTags entity)
		{
			this.SendPropertyChanging();
			entity.Machinery = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MachineSpecifications")]
	public partial class MachineSpecifications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MachineID;
		
		private int _SpecificationID;
		
		private EntityRef<Machinery> _Machinery;
		
		private EntityRef<Specifications> _Specifications;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMachineIDChanging(int value);
    partial void OnMachineIDChanged();
    partial void OnSpecificationIDChanging(int value);
    partial void OnSpecificationIDChanged();
    #endregion
		
		public MachineSpecifications()
		{
			this._Machinery = default(EntityRef<Machinery>);
			this._Specifications = default(EntityRef<Specifications>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MachineID
		{
			get
			{
				return this._MachineID;
			}
			set
			{
				if ((this._MachineID != value))
				{
					if (this._Machinery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMachineIDChanging(value);
					this.SendPropertyChanging();
					this._MachineID = value;
					this.SendPropertyChanged("MachineID");
					this.OnMachineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SpecificationID
		{
			get
			{
				return this._SpecificationID;
			}
			set
			{
				if ((this._SpecificationID != value))
				{
					if (this._Specifications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecificationIDChanging(value);
					this.SendPropertyChanging();
					this._SpecificationID = value;
					this.SendPropertyChanged("SpecificationID");
					this.OnSpecificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Machinery_MachineSpecifications", Storage="_Machinery", ThisKey="MachineID", OtherKey="Id", IsForeignKey=true)]
		public Machinery Machinery
		{
			get
			{
				return this._Machinery.Entity;
			}
			set
			{
				Machinery previousValue = this._Machinery.Entity;
				if (((previousValue != value) 
							|| (this._Machinery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Machinery.Entity = null;
						previousValue.MachineSpecifications.Remove(this);
					}
					this._Machinery.Entity = value;
					if ((value != null))
					{
						value.MachineSpecifications.Add(this);
						this._MachineID = value.Id;
					}
					else
					{
						this._MachineID = default(int);
					}
					this.SendPropertyChanged("Machinery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specifications_MachineSpecifications", Storage="_Specifications", ThisKey="SpecificationID", OtherKey="Id", IsForeignKey=true)]
		public Specifications Specifications
		{
			get
			{
				return this._Specifications.Entity;
			}
			set
			{
				Specifications previousValue = this._Specifications.Entity;
				if (((previousValue != value) 
							|| (this._Specifications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specifications.Entity = null;
						previousValue.MachineSpecifications.Remove(this);
					}
					this._Specifications.Entity = value;
					if ((value != null))
					{
						value.MachineSpecifications.Add(this);
						this._SpecificationID = value.Id;
					}
					else
					{
						this._SpecificationID = default(int);
					}
					this.SendPropertyChanged("Specifications");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MachineTags")]
	public partial class MachineTags : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MachineID;
		
		private int _TagID;
		
		private EntityRef<Machinery> _Machinery;
		
		private EntityRef<Tags> _Tags;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMachineIDChanging(int value);
    partial void OnMachineIDChanged();
    partial void OnTagIDChanging(int value);
    partial void OnTagIDChanged();
    #endregion
		
		public MachineTags()
		{
			this._Machinery = default(EntityRef<Machinery>);
			this._Tags = default(EntityRef<Tags>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MachineID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int MachineID
		{
			get
			{
				return this._MachineID;
			}
			set
			{
				if ((this._MachineID != value))
				{
					if (this._Machinery.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMachineIDChanging(value);
					this.SendPropertyChanging();
					this._MachineID = value;
					this.SendPropertyChanged("MachineID");
					this.OnMachineIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TagID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int TagID
		{
			get
			{
				return this._TagID;
			}
			set
			{
				if ((this._TagID != value))
				{
					if (this._Tags.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTagIDChanging(value);
					this.SendPropertyChanging();
					this._TagID = value;
					this.SendPropertyChanged("TagID");
					this.OnTagIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Machinery_MachineTags", Storage="_Machinery", ThisKey="MachineID", OtherKey="Id", IsForeignKey=true)]
		public Machinery Machinery
		{
			get
			{
				return this._Machinery.Entity;
			}
			set
			{
				Machinery previousValue = this._Machinery.Entity;
				if (((previousValue != value) 
							|| (this._Machinery.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Machinery.Entity = null;
						previousValue.MachineTags.Remove(this);
					}
					this._Machinery.Entity = value;
					if ((value != null))
					{
						value.MachineTags.Add(this);
						this._MachineID = value.Id;
					}
					else
					{
						this._MachineID = default(int);
					}
					this.SendPropertyChanged("Machinery");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tags_MachineTags", Storage="_Tags", ThisKey="TagID", OtherKey="Id", IsForeignKey=true)]
		public Tags Tags
		{
			get
			{
				return this._Tags.Entity;
			}
			set
			{
				Tags previousValue = this._Tags.Entity;
				if (((previousValue != value) 
							|| (this._Tags.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Tags.Entity = null;
						previousValue.MachineTags.Remove(this);
					}
					this._Tags.Entity = value;
					if ((value != null))
					{
						value.MachineTags.Add(this);
						this._TagID = value.Id;
					}
					else
					{
						this._TagID = default(int);
					}
					this.SendPropertyChanged("Tags");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MandatSpecificCatalogCategories")]
	public partial class MandatSpecificCatalogCategories : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _SpecificationID;
		
		private int _CatalogCategoryID;
		
		private EntityRef<CatalogCategories> _CatalogCategories;
		
		private EntityRef<Specifications> _Specifications;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnSpecificationIDChanging(int value);
    partial void OnSpecificationIDChanged();
    partial void OnCatalogCategoryIDChanging(int value);
    partial void OnCatalogCategoryIDChanged();
    #endregion
		
		public MandatSpecificCatalogCategories()
		{
			this._CatalogCategories = default(EntityRef<CatalogCategories>);
			this._Specifications = default(EntityRef<Specifications>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_SpecificationID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int SpecificationID
		{
			get
			{
				return this._SpecificationID;
			}
			set
			{
				if ((this._SpecificationID != value))
				{
					if (this._Specifications.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnSpecificationIDChanging(value);
					this.SendPropertyChanging();
					this._SpecificationID = value;
					this.SendPropertyChanged("SpecificationID");
					this.OnSpecificationIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CatalogCategoryID", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int CatalogCategoryID
		{
			get
			{
				return this._CatalogCategoryID;
			}
			set
			{
				if ((this._CatalogCategoryID != value))
				{
					if (this._CatalogCategories.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCatalogCategoryIDChanging(value);
					this.SendPropertyChanging();
					this._CatalogCategoryID = value;
					this.SendPropertyChanged("CatalogCategoryID");
					this.OnCatalogCategoryIDChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="CatalogCategories_MandatSpecificCatalogCategories", Storage="_CatalogCategories", ThisKey="CatalogCategoryID", OtherKey="Id", IsForeignKey=true)]
		public CatalogCategories CatalogCategories
		{
			get
			{
				return this._CatalogCategories.Entity;
			}
			set
			{
				CatalogCategories previousValue = this._CatalogCategories.Entity;
				if (((previousValue != value) 
							|| (this._CatalogCategories.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._CatalogCategories.Entity = null;
						previousValue.MandatSpecificCatalogCategories.Remove(this);
					}
					this._CatalogCategories.Entity = value;
					if ((value != null))
					{
						value.MandatSpecificCatalogCategories.Add(this);
						this._CatalogCategoryID = value.Id;
					}
					else
					{
						this._CatalogCategoryID = default(int);
					}
					this.SendPropertyChanged("CatalogCategories");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specifications_MandatSpecificCatalogCategories", Storage="_Specifications", ThisKey="SpecificationID", OtherKey="Id", IsForeignKey=true)]
		public Specifications Specifications
		{
			get
			{
				return this._Specifications.Entity;
			}
			set
			{
				Specifications previousValue = this._Specifications.Entity;
				if (((previousValue != value) 
							|| (this._Specifications.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Specifications.Entity = null;
						previousValue.MandatSpecificCatalogCategories.Remove(this);
					}
					this._Specifications.Entity = value;
					if ((value != null))
					{
						value.MandatSpecificCatalogCategories.Add(this);
						this._SpecificationID = value.Id;
					}
					else
					{
						this._SpecificationID = default(int);
					}
					this.SendPropertyChanged("Specifications");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Roles")]
	public partial class Roles : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private int _LimitSizeFileExternal;
		
		private int _LimitSizeFileInternal;
		
		private int _LimitTraffic;
		
		private bool _IsDownloadFile;
		
		private EntitySet<Users> _Users;
		
		private EntitySet<AccessCatalogCategories> _AccessCatalogCategories;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnLimitSizeFileExternalChanging(int value);
    partial void OnLimitSizeFileExternalChanged();
    partial void OnLimitSizeFileInternalChanging(int value);
    partial void OnLimitSizeFileInternalChanged();
    partial void OnLimitTrafficChanging(int value);
    partial void OnLimitTrafficChanged();
    partial void OnIsDownloadFileChanging(bool value);
    partial void OnIsDownloadFileChanged();
    #endregion
		
		public Roles()
		{
			this._Users = new EntitySet<Users>(new Action<Users>(this.attach_Users), new Action<Users>(this.detach_Users));
			this._AccessCatalogCategories = new EntitySet<AccessCatalogCategories>(new Action<AccessCatalogCategories>(this.attach_AccessCatalogCategories), new Action<AccessCatalogCategories>(this.detach_AccessCatalogCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitSizeFileExternal", DbType="Int NOT NULL")]
		public int LimitSizeFileExternal
		{
			get
			{
				return this._LimitSizeFileExternal;
			}
			set
			{
				if ((this._LimitSizeFileExternal != value))
				{
					this.OnLimitSizeFileExternalChanging(value);
					this.SendPropertyChanging();
					this._LimitSizeFileExternal = value;
					this.SendPropertyChanged("LimitSizeFileExternal");
					this.OnLimitSizeFileExternalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitSizeFileInternal", DbType="Int NOT NULL")]
		public int LimitSizeFileInternal
		{
			get
			{
				return this._LimitSizeFileInternal;
			}
			set
			{
				if ((this._LimitSizeFileInternal != value))
				{
					this.OnLimitSizeFileInternalChanging(value);
					this.SendPropertyChanging();
					this._LimitSizeFileInternal = value;
					this.SendPropertyChanged("LimitSizeFileInternal");
					this.OnLimitSizeFileInternalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LimitTraffic", DbType="Int NOT NULL")]
		public int LimitTraffic
		{
			get
			{
				return this._LimitTraffic;
			}
			set
			{
				if ((this._LimitTraffic != value))
				{
					this.OnLimitTrafficChanging(value);
					this.SendPropertyChanging();
					this._LimitTraffic = value;
					this.SendPropertyChanged("LimitTraffic");
					this.OnLimitTrafficChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IsDownloadFile", DbType="Bit NOT NULL")]
		public bool IsDownloadFile
		{
			get
			{
				return this._IsDownloadFile;
			}
			set
			{
				if ((this._IsDownloadFile != value))
				{
					this.OnIsDownloadFileChanging(value);
					this.SendPropertyChanging();
					this._IsDownloadFile = value;
					this.SendPropertyChanged("IsDownloadFile");
					this.OnIsDownloadFileChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roles_Users", Storage="_Users", ThisKey="Id", OtherKey="RoleID")]
		public EntitySet<Users> Users
		{
			get
			{
				return this._Users;
			}
			set
			{
				this._Users.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Roles_AccessCatalogCategories", Storage="_AccessCatalogCategories", ThisKey="Id", OtherKey="RoleID")]
		public EntitySet<AccessCatalogCategories> AccessCatalogCategories
		{
			get
			{
				return this._AccessCatalogCategories;
			}
			set
			{
				this._AccessCatalogCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Roles = this;
		}
		
		private void detach_Users(Users entity)
		{
			this.SendPropertyChanging();
			entity.Roles = null;
		}
		
		private void attach_AccessCatalogCategories(AccessCatalogCategories entity)
		{
			this.SendPropertyChanging();
			entity.Roles = this;
		}
		
		private void detach_AccessCatalogCategories(AccessCatalogCategories entity)
		{
			this.SendPropertyChanging();
			entity.Roles = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Specifications")]
	public partial class Specifications : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private string _Value;
		
		private EntitySet<MachineSpecifications> _MachineSpecifications;
		
		private EntitySet<MandatSpecificCatalogCategories> _MandatSpecificCatalogCategories;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Specifications()
		{
			this._MachineSpecifications = new EntitySet<MachineSpecifications>(new Action<MachineSpecifications>(this.attach_MachineSpecifications), new Action<MachineSpecifications>(this.detach_MachineSpecifications));
			this._MandatSpecificCatalogCategories = new EntitySet<MandatSpecificCatalogCategories>(new Action<MandatSpecificCatalogCategories>(this.attach_MandatSpecificCatalogCategories), new Action<MandatSpecificCatalogCategories>(this.detach_MandatSpecificCatalogCategories));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specifications_MachineSpecifications", Storage="_MachineSpecifications", ThisKey="Id", OtherKey="SpecificationID")]
		public EntitySet<MachineSpecifications> MachineSpecifications
		{
			get
			{
				return this._MachineSpecifications;
			}
			set
			{
				this._MachineSpecifications.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Specifications_MandatSpecificCatalogCategories", Storage="_MandatSpecificCatalogCategories", ThisKey="Id", OtherKey="SpecificationID")]
		public EntitySet<MandatSpecificCatalogCategories> MandatSpecificCatalogCategories
		{
			get
			{
				return this._MandatSpecificCatalogCategories;
			}
			set
			{
				this._MandatSpecificCatalogCategories.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MachineSpecifications(MachineSpecifications entity)
		{
			this.SendPropertyChanging();
			entity.Specifications = this;
		}
		
		private void detach_MachineSpecifications(MachineSpecifications entity)
		{
			this.SendPropertyChanging();
			entity.Specifications = null;
		}
		
		private void attach_MandatSpecificCatalogCategories(MandatSpecificCatalogCategories entity)
		{
			this.SendPropertyChanging();
			entity.Specifications = this;
		}
		
		private void detach_MandatSpecificCatalogCategories(MandatSpecificCatalogCategories entity)
		{
			this.SendPropertyChanging();
			entity.Specifications = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Tags")]
	public partial class Tags : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<MachineTags> _MachineTags;
		
    #region Определения метода расширяемости
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Tags()
		{
			this._MachineTags = new EntitySet<MachineTags>(new Action<MachineTags>(this.attach_MachineTags), new Action<MachineTags>(this.detach_MachineTags));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="NVarChar(MAX) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Tags_MachineTags", Storage="_MachineTags", ThisKey="Id", OtherKey="TagID")]
		public EntitySet<MachineTags> MachineTags
		{
			get
			{
				return this._MachineTags;
			}
			set
			{
				this._MachineTags.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MachineTags(MachineTags entity)
		{
			this.SendPropertyChanging();
			entity.Tags = this;
		}
		
		private void detach_MachineTags(MachineTags entity)
		{
			this.SendPropertyChanging();
			entity.Tags = null;
		}
	}
}
#pragma warning restore 1591
